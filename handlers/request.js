const { getOrCreateUser, isAdmin } = require('./common');
const { logAction } = require('../logger');
const Request = require('../models/request');
const User = require('../models/user');

/**
 * Handle /requests command - list all requests for admins
 */
const handleListRequests = async (ctx) => {
  try {
    const user = await getOrCreateUser(ctx);
    
    // Check if user is admin
    if (!isAdmin(user)) {
      await ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
      return;
    }
    
    // Get page parameter (if exists)
    const args = ctx.message.text.split(' ');
    const page = parseInt(args[1]) || 1;
    const limit = 10;
    const skip = (page - 1) * limit;
    
    // Get requests count by status
    const pendingCount = await Request.countDocuments({ status: 'pending' });
    const approvedCount = await Request.countDocuments({ status: 'approved' });
    const assignedCount = await Request.countDocuments({ status: 'assigned' });
    const answeredCount = await Request.countDocuments({ status: 'answered' });
    const closedCount = await Request.countDocuments({ status: 'closed' });
    const declinedCount = await Request.countDocuments({ status: 'declined' });
    const totalCount = await Request.countDocuments();
    
    // Get requests for current page
    const requests = await Request.find()
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit)
      .populate('userId')
      .populate('categoryId')
      .populate('studentId');
    
    let message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π:\n`;
    message += `‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: ${pendingCount}\n`;
    message += `üë®‚Äçüíº –û–∂–∏–¥–∞—é—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: ${approvedCount}\n`;
    message += `üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${assignedCount}\n`;
    message += `‚úÖ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: ${answeredCount}\n`;
    message += `‚úÖ –ó–∞–∫—Ä—ã—Ç–æ: ${closedCount}\n`;
    message += `‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${declinedCount}\n`;
    message += `–í—Å–µ–≥–æ: ${totalCount}\n\n`;
    
    message += `üìã –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}):\n\n`;
    
    if (requests.length === 0) {
      message += '–ù–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.';
    } else {
      requests.forEach((request, index) => {
        const statusMap = {
          'pending': '‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
          'approved': 'üë®‚Äçüíº –û–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è',
          'declined': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
          'assigned': 'üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
          'answered': '‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
          'closed': '‚úÖ –ó–∞–∫—Ä—ã—Ç–æ'
        };
        
        const date = request.createdAt.toLocaleDateString('ru-RU');
        const username = request.userId.username 
          ? `@${request.userId.username}` 
          : `${request.userId.telegramId}`;
        
        message += `${skip + index + 1}. #${request._id} - ${statusMap[request.status]}\n`;
        message += `   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}\n`;
        message += `   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${request.categoryId.name} ${request.categoryId.hashtag}\n`;
        message += `   –î–∞—Ç–∞: ${date}\n`;
        
        if (request.studentId) {
          const studentName = request.studentId.username 
            ? `@${request.studentId.username}` 
            : `${request.studentId.telegramId}`;
          
          message += `   –°—Ç—É–¥–µ–Ω—Ç: ${studentName}\n`;
        }
        
        message += '\n';
      });
      
      // Add pagination info
      const totalPages = Math.ceil(totalCount / limit);
      message += `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /requests <–Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã> –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.`;
    }
    
    await ctx.reply(message);
    await logAction('admin_listed_requests', { userId: user._id });
  } catch (error) {
    console.error('Error handling list requests:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
};

/**
 * Handle /stats command - show bot statistics
 */
const handleStats = async (ctx) => {
  try {
    const user = await getOrCreateUser(ctx);
    
    // Check if user is admin
    if (!isAdmin(user)) {
      await ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
      return;
    }
    
    // Get counts
    const usersCount = await User.countDocuments();
    const adminCount = await User.countDocuments({ role: 'admin' });
    const studentCount = await User.countDocuments({ role: 'student' });
    const userCount = await User.countDocuments({ role: 'user' });
    
    const totalRequests = await Request.countDocuments();
    const pendingCount = await Request.countDocuments({ status: 'pending' });
    const approvedCount = await Request.countDocuments({ status: 'approved' });
    const assignedCount = await Request.countDocuments({ status: 'assigned' });
    const answeredCount = await Request.countDocuments({ status: 'answered' });
    const closedCount = await Request.countDocuments({ status: 'closed' });
    const declinedCount = await Request.countDocuments({ status: 'declined' });
    
    let message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n`;
    
    message += `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n`;
    message += `   –í—Å–µ–≥–æ: ${usersCount}\n`;
    message += `   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: ${adminCount}\n`;
    message += `   –°—Ç—É–¥–µ–Ω—Ç—ã: ${studentCount}\n`;
    message += `   –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${userCount}\n\n`;
    
    message += `üì® –û–±—Ä–∞—â–µ–Ω–∏—è:\n`;
    message += `   –í—Å–µ–≥–æ: ${totalRequests}\n`;
    message += `   ‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: ${pendingCount}\n`;
    message += `   üë®‚Äçüíº –û–∂–∏–¥–∞—é—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: ${approvedCount}\n`;
    message += `   üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${assignedCount}\n`;
    message += `   ‚úÖ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: ${answeredCount}\n`;
    message += `   ‚úÖ –ó–∞–∫—Ä—ã—Ç–æ: ${closedCount}\n`;
    message += `   ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${declinedCount}\n`;
    
    await ctx.reply(message);
    await logAction('admin_viewed_stats', { userId: user._id });
  } catch (error) {
    console.error('Error handling stats command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
};

module.exports = {
  handleListRequests,
  handleStats
};