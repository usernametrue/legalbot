const { Markup } = require('telegraf');
const User = require('../models/user');
const Request = require('../models/request');
const { getOrCreateUser, getMainMenuKeyboard, isStudent } = require('./common');
const { logAction } = require('../logger');

// Student state management (in-memory for simplicity)
const studentStates = new Map();

/**
 * Handle "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É" button
 */
const handleTakeRequest = async (ctx, bot) => {
  try {
    const requestId = ctx.callbackQuery.data.split(':')[1];
    
    // Get request
    const request = await Request.findById(requestId)
      .populate('categoryId');
    
    if (!request) {
      await ctx.answerCallbackQuery('–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      return;
    }
    
    if (request.status !== 'approved') {
      await ctx.answerCallbackQuery('–≠—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –≤–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º —Å—Ç–∞—Ç—É—Å–µ.');
      return;
    }
    
    const user = await getOrCreateUser(ctx);
    
    // Check if student already has an active assignment
    if (user.currentAssignmentId) {
      await ctx.answerCallbackQuery('–í—ã —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –¥—Ä—É–≥–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ, –ø—Ä–µ–∂–¥–µ —á–µ–º –±—Ä–∞—Ç—å –Ω–æ–≤–æ–µ.');
      return;
    }
    
    // Set user role to student if needed
    if (user.role === 'user') {
      user.role = 'student';
      await user.save();
      await logAction('user_became_student', { userId: user._id });
    }
    
    // Update request with student
    request.status = 'assigned';
    request.studentId = user._id;
    await request.save();
    
    // Update user with active assignment
    user.currentAssignmentId = request._id;
    await user.save();
    
    // Update message in student chat
    const studentName = user.username ? `@${user.username}` : `${user.firstName || '–°—Ç—É–¥–µ–Ω—Ç'} ${user.lastName || ''}`;
    await ctx.editMessageText(
      ctx.callbackQuery.message.text + `\n\n–ü—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É: ${studentName}`,
      { reply_markup: { inline_keyboard: [] } }
    );
    
    // Send request details to student in private chat
    const detailMessage = `
üì® –û–±—Ä–∞—â–µ–Ω–∏–µ #${request._id}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${request.categoryId.name} ${request.categoryId.hashtag}

üìù –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:
${request.text}

–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞".
`;

    await bot.telegram.sendMessage(
      user.telegramId,
      detailMessage,
      Markup.keyboard([
        ['–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è']
      ]).resize()
    );
    
    // Set student state to writing answer
    studentStates.set(user.telegramId, { 
      state: 'writing_answer',
      requestId: request._id
    });
    
    await ctx.answerCallbackQuery('–û–±—Ä–∞—â–µ–Ω–∏–µ –≤–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É.');
    await logAction('student_took_request', { 
      studentId: user._id,
      requestId: request._id
    });
  } catch (error) {
    console.error('Error handling take request:', error);
    await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
};

/**
 * Handle student answer
 */
const handleStudentAnswer = async (ctx) => {
  try {
    const user = await getOrCreateUser(ctx);
    
    if (!isStudent(user) || !user.currentAssignmentId) {
      return; // Not a student or no active assignment
    }
    
    const studentState = studentStates.get(user.telegramId);
    if (!studentState || studentState.state !== 'writing_answer') {
      return;
    }
    
    const answerText = ctx.message.text;
    
    // Update student state
    studentStates.set(user.telegramId, { 
      state: 'confirming_answer',
      requestId: studentState.requestId,
      answerText
    });
    
    await ctx.reply(
      '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:\n\n' + answerText,
      Markup.keyboard([
        ['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞'],
        ['–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç'],
        ['–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è']
      ]).resize()
    );
  } catch (error) {
    console.error('Error handling student answer:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
};

/**
 * Handle "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞" button
 */
const handleConfirmAnswer = async (ctx, bot) => {
  try {
    const user = await getOrCreateUser(ctx);
    
    if (!isStudent(user) || !user.currentAssignmentId) {
      await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.');
      return;
    }
    
    const studentState = studentStates.get(user.telegramId);
    if (!studentState || studentState.state !== 'confirming_answer') {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ.');
      return;
    }
    
    const request = await Request.findById(studentState.requestId)
      .populate('categoryId');
    
    if (!request) {
      await ctx.reply('–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      return;
    }
    
    // Update request with answer
    request.status = 'answered';
    request.answerText = studentState.answerText;
    await request.save();
    
    // Send answer to admin chat for approval
    const adminChatId = process.env.ADMIN_CHAT_ID;
    const adminMessage = `
üì® –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ #${request._id}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${request.categoryId.name} ${request.categoryId.hashtag}
üë®‚Äçüíº –°—Ç—É–¥–µ–Ω—Ç: ${user.username ? `@${user.username}` : user.telegramId}

üìù –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:
${request.text}

‚úèÔ∏è –û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞:
${request.answerText}
`;

    await bot.telegram.sendMessage(adminChatId, adminMessage, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `approve_answer:${request._id}` },
            { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `decline_answer:${request._id}` }
          ]
        ]
      }
    });
    
    await ctx.reply('–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω.');
    studentStates.delete(user.telegramId);
    
    await logAction('student_submitted_answer', { 
      studentId: user._id,
      requestId: request._id
    });
  } catch (error) {
    console.error('Error handling confirm answer:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
};

/**
 * Handle "–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç" button
 */
const handleEditAnswer = async (ctx) => {
  try {
    const user = await getOrCreateUser(ctx);
    
    if (!isStudent(user) || !user.currentAssignmentId) {
      await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.');
      return;
    }
    
    const studentState = studentStates.get(user.telegramId);
    if (!studentState) {
      return;
    }
    
    // Update student state
    studentStates.set(user.telegramId, { 
      state: 'writing_answer',
      requestId: studentState.requestId
    });
    
    await ctx.reply(
      '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∑–∞–Ω–æ–≤–æ:',
      Markup.keyboard([
        ['–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è']
      ]).resize()
    );
  } catch (error) {
    console.error('Error handling edit answer:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
};

/**
 * Handle edit answer callback
 */
const handleEditAnswerCallback = async (ctx) => {
  try {
    const requestId = ctx.callbackQuery.data.split(':')[1];
    
    const request = await Request.findById(requestId)
      .populate('categoryId');
    
    if (!request) {
      await ctx.answerCallbackQuery('–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      return;
    }
    
    const user = await getOrCreateUser(ctx);
    
    if (request.studentId.toString() !== user._id.toString()) {
      await ctx.answerCallbackQuery('–≠—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥—Ä—É–≥–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É.');
      return;
    }
    
    // Update student state
    studentStates.set(user.telegramId, { 
      state: 'writing_answer',
      requestId: request._id
    });
    
    await ctx.answerCallbackQuery();
    await ctx.reply(
      '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∑–∞–Ω–æ–≤–æ:',
      Markup.keyboard([
        ['–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è']
      ]).resize()
    );
  } catch (error) {
    console.error('Error handling edit answer callback:', error);
    await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
};

/**
 * Handle "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è" button or callback
 */
const handleRejectAssignment = async (ctx, bot) => {
  try {
    const user = await getOrCreateUser(ctx);
    
    if (!isStudent(user) || !user.currentAssignmentId) {
      if (ctx.callbackQuery) {
        await ctx.answerCallbackQuery('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.');
      } else {
        await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.');
      }
      return;
    }
    
    let requestId;
    
    // Handle both text button and callback
    if (ctx.callbackQuery) {
      requestId = ctx.callbackQuery.data.split(':')[1];
      await ctx.answerCallbackQuery();
    } else {
      requestId = user.currentAssignmentId;
    }
    
    const request = await Request.findById(requestId)
      .populate('categoryId');
    
    if (!request) {
      await ctx.reply('–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      return;
    }
    
    // Update request and user
    request.status = 'approved';
    request.studentId = null;
    await request.save();
    
    user.currentAssignmentId = null;
    await user.save();
    
    // Send back to student chat
    const studentChatId = process.env.STUDENT_CHAT_ID;
    const studentMessage = `
üì® –û–±—Ä–∞—â–µ–Ω–∏–µ #${request._id} (–≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å)
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${request.categoryId.name} ${request.categoryId.hashtag}

üìù –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:
${request.text}
`;

    await bot.telegram.sendMessage(studentChatId, studentMessage, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üîÑ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', callback_data: `take_request:${request._id}` }
          ]
        ]
      }
    });
    
    if (ctx.callbackQuery) {
      await ctx.reply('–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è. –û–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å.');
    } else {
      await ctx.reply('–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è. –û–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å.');
    }
    
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
    studentStates.delete(user.telegramId);
    
    await logAction('student_rejected_assignment', { 
      studentId: user._id,
      requestId: request._id
    });
  } catch (error) {
    console.error('Error handling reject assignment:', error);
    if (ctx.callbackQuery) {
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    } else {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    }
  }
};

module.exports = {
  handleTakeRequest,
  handleStudentAnswer,
  handleConfirmAnswer,
  handleEditAnswer,
  handleEditAnswerCallback,
  handleRejectAssignment,
  studentStates
};