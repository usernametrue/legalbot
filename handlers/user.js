const { Markup } = require('telegraf');
const { getOrCreateUser, getMainMenuKeyboard, getBackKeyboard } = require('./common');
const Category = require('../models/category');
const Request = require('../models/request');
const FAQ = require('../models/faq');
const { logAction } = require('../logger');

// User state management (in-memory for simplicity)
const userStates = new Map();

/**
 * Handle "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" action
 */
const handleAskQuestion = async (ctx) => {
  try {
    const user = await getOrCreateUser(ctx);
    const categories = await Category.find().sort({ name: 1 });

    if (categories.length === 0) {
      await ctx.reply('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
      return;
    }

    // Create keyboard with categories
    const keyboard = [];
    categories.forEach(category => {
      keyboard.push([category.name]);
    });
    keyboard.push(['–ù–∞–∑–∞–¥']);

    // Set user state to selecting category
    userStates.set(user.telegramId, { 
      state: 'selecting_category'
    });

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:', Markup.keyboard(keyboard).resize());
    await logAction('user_selecting_category', { userId: user._id });
  } catch (error) {
    console.error('Error handling ask question:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
  }
};

/**
 * Handle category selection
 */
const handleCategorySelection = async (ctx) => {
  try {
    const user = await getOrCreateUser(ctx);
    const categoryName = ctx.message.text;

    const category = await Category.findOne({ name: categoryName });
    if (!category) {
      await ctx.reply('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.');
      return;
    }

    // Update user state with selected category
    userStates.set(user.telegramId, { 
      state: 'entering_request',
      categoryId: category._id
    });

    await ctx.reply(
      '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–Ω–µ –º–µ–Ω–µ–µ 150 —Å–∏–º–≤–æ–ª–æ–≤):', 
      getBackKeyboard()
    );
    await logAction('user_selected_category', { 
      userId: user._id, 
      categoryId: category._id 
    });
  } catch (error) {
    console.error('Error handling category selection:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
  }
};

/**
 * Handle request text entry
 */
const handleRequestText = async (ctx) => {
  try {
    const user = await getOrCreateUser(ctx);
    const requestText = ctx.message.text;

    if (requestText.length < 150) {
      await ctx.reply('–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 150 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.');
      return;
    }

    const userState = userStates.get(user.telegramId);
    
    // Update user state with request text
    userStates.set(user.telegramId, { 
      ...userState,
      state: 'confirming_request',
      requestText
    });

    await ctx.reply(
      '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n' + requestText,
      Markup.keyboard([
        ['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'],
        ['–ò–∑–º–µ–Ω–∏—Ç—å'],
        ['–ù–∞–∑–∞–¥']
      ]).resize()
    );
    
    await logAction('user_entered_request', { 
      userId: user._id, 
      categoryId: userState.categoryId,
      textLength: requestText.length
    });
  } catch (error) {
    console.error('Error handling request text:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
  }
};

/**
 * Handle request confirmation
 */
const handleRequestConfirmation = async (ctx, bot) => {
  try {
    const user = await getOrCreateUser(ctx);
    const userState = userStates.get(user.telegramId);
    
    if (!userState || !userState.categoryId || !userState.requestText) {
      await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
      return;
    }

    const category = await Category.findById(userState.categoryId);
    
    // Create request in database
    const request = new Request({
      userId: user._id,
      categoryId: userState.categoryId,
      text: userState.requestText,
      status: 'pending'
    });
    
    await request.save();
    
    // Send request to admin chat
    const adminChatId = process.env.ADMIN_CHAT_ID;
    const adminMessage = `
üì® –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #${request._id}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name} ${category.hashtag}

üìù –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:
${userState.requestText}
`;

    await bot.telegram.sendMessage(adminChatId, adminMessage, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_request:${request._id}` },
            { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `decline_request:${request._id}` }
          ]
        ]
      }
    });

    // Reset user state
    userStates.delete(user.telegramId);
    
    await ctx.reply('–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –æ–Ω–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ.');
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
    
    await logAction('user_submitted_request', { 
      userId: user._id, 
      requestId: request._id
    });
  } catch (error) {
    console.error('Error handling request confirmation:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
  }
};

/**
 * Handle "–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è" action
 */
const handleMyRequests = async (ctx) => {
  try {
    const user = await getOrCreateUser(ctx);
    
    const requests = await Request.find({ userId: user._id })
      .sort({ createdAt: -1 })
      .populate('categoryId');
    
    if (requests.length === 0) {
      await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.');
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
      return;
    }
    
    let message = 'üìã –í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n';
    
    requests.forEach((request, index) => {
      const statusMap = {
        'pending': '‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
        'approved': 'üë®‚Äçüíº –û–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è',
        'declined': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
        'assigned': 'üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'answered': '‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
        'closed': '‚úÖ –ó–∞–∫—Ä—ã—Ç–æ'
      };
      
      const date = request.createdAt.toLocaleDateString('ru-RU');
      
      message += `${index + 1}. ${request.categoryId.name} - ${statusMap[request.status]}\n`;
      message += `   –î–∞—Ç–∞: ${date}\n`;
      
      if (request.status === 'closed' && request.answerText) {
        message += `   [–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç](tg://request?${request._id})\n`;
      }
      
      if (request.status === 'declined' && request.adminComment) {
        message += `   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${request.adminComment}\n`;
      }
      
      message += '\n';
    });
    
    await ctx.reply(message);
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
    
    await logAction('user_viewed_requests', { userId: user._id });
  } catch (error) {
    console.error('Error handling my requests:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
  }
};

/**
 * Handle "FAQ" action
 */
const handleFAQ = async (ctx) => {
  try {
    const user = await getOrCreateUser(ctx);
    const categories = await Category.find().sort({ name: 1 });

    if (categories.length === 0) {
      await ctx.reply('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π FAQ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
      return;
    }

    // Create keyboard with categories
    const keyboard = [];
    categories.forEach(category => {
      keyboard.push([category.name]);
    });
    keyboard.push(['–ù–∞–∑–∞–¥']);

    // Set user state to selecting FAQ category
    userStates.set(user.telegramId, { 
      state: 'selecting_faq_category'
    });

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é FAQ:', Markup.keyboard(keyboard).resize());
    await logAction('user_viewing_faq', { userId: user._id });
  } catch (error) {
    console.error('Error handling FAQ:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
  }
};

/**
 * Handle FAQ category selection
 */
const handleFAQCategorySelection = async (ctx) => {
  try {
    const user = await getOrCreateUser(ctx);
    const categoryName = ctx.message.text;

    const category = await Category.findOne({ name: categoryName });
    if (!category) {
      await ctx.reply('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.');
      return;
    }

    const faqs = await FAQ.find({ categoryId: category._id });

    if (faqs.length === 0) {
      await ctx.reply('–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.');
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
      return;
    }

    // Create keyboard with FAQs
    const keyboard = [];
    faqs.forEach(faq => {
      keyboard.push([faq.question]);
    });
    keyboard.push(['–ù–∞–∑–∞–¥']);

    // Update user state with selected category
    userStates.set(user.telegramId, { 
      state: 'selecting_faq',
      categoryId: category._id,
      faqs: faqs.reduce((acc, faq) => {
        acc[faq.question] = faq;
        return acc;
      }, {})
    });

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:', Markup.keyboard(keyboard).resize());
    await logAction('user_selected_faq_category', { 
      userId: user._id, 
      categoryId: category._id 
    });
  } catch (error) {
    console.error('Error handling FAQ category selection:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
  }
};

/**
 * Handle FAQ question selection
 */
const handleFAQSelection = async (ctx) => {
  try {
    const user = await getOrCreateUser(ctx);
    const userState = userStates.get(user.telegramId);
    
    if (!userState || !userState.faqs) {
      await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
      return;
    }
    
    const question = ctx.message.text;
    const faq = userState.faqs[question];
    
    if (!faq) {
      await ctx.reply('–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.');
      return;
    }
    
    // Send FAQ answer
    await ctx.reply(`üìå –í–æ–ø—Ä–æ—Å: ${faq.question}\n\nüìù –û—Ç–≤–µ—Ç: ${faq.answer}`);
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥:', getBackKeyboard());
    
    await logAction('user_viewed_faq', { 
      userId: user._id, 
      faqId: faq._id 
    });
  } catch (error) {
    console.error('Error handling FAQ selection:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
  }
};

/**
 * Handle "–ù–∞–∑–∞–¥" (back) button
 */
const handleBack = async (ctx) => {
  try {
    const user = await getOrCreateUser(ctx);
    const userState = userStates.get(user.telegramId);
    
    if (!userState) {
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
      return;
    }
    
    // Depending on current state, go back to appropriate menu
    switch (userState.state) {
      case 'selecting_category':
      case 'selecting_faq_category':
        userStates.delete(user.telegramId);
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
        break;
        
      case 'entering_request':
        userStates.set(user.telegramId, { state: 'selecting_category' });
        const categories = await Category.find().sort({ name: 1 });
        const keyboard = categories.map(category => [category.name]);
        keyboard.push(['–ù–∞–∑–∞–¥']);
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:', Markup.keyboard(keyboard).resize());
        break;
        
      case 'confirming_request':
        userStates.set(user.telegramId, { 
          state: 'entering_request',
          categoryId: userState.categoryId
        });
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–Ω–µ –º–µ–Ω–µ–µ 150 —Å–∏–º–≤–æ–ª–æ–≤):', getBackKeyboard());
        break;
        
      case 'selecting_faq':
        userStates.set(user.telegramId, { state: 'selecting_faq_category' });
        const faqCategories = await Category.find().sort({ name: 1 });
        const faqKeyboard = faqCategories.map(category => [category.name]);
        faqKeyboard.push(['–ù–∞–∑–∞–¥']);
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é FAQ:', Markup.keyboard(faqKeyboard).resize());
        break;
        
      default:
        userStates.delete(user.telegramId);
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
    }
    
    await logAction('user_pressed_back', { userId: user._id });
  } catch (error) {
    console.error('Error handling back button:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
  }
};

module.exports = {
  handleAskQuestion,
  handleCategorySelection,
  handleRequestText,
  handleRequestConfirmation,
  handleMyRequests,
  handleFAQ,
  handleFAQCategorySelection,
  handleFAQSelection,
  handleBack,
  userStates
};